Things to do:

*  profile/work-on efficiency

??????? Is it more efficient to have no bitmap-vectors (less object creation; less defmethod calls and dispatching)??

 -- single hamt node that contains two bitmaps and matching vectors (get rid of bitmap-vector objects)

 -- add, loc, remove (stay the same but will use the below functions rather than rely on bit-vectors)

 -- ins, upd, del either items, entries, or nodes; they call the v: and b: funcitons directly on the appropriate data/vector pairs

 -- at-position will become item-at (defmethod) and node-at (defun)
     -- item-at will have one version for sets (items t) and one for maps (entry)

 -- at-index will become    get-item (defmethod) and get-node (defun)
    -- get-item will return set values for sets and entries for maps









-- bags/multisets

* rethink iterators
   -- need to iterate on the values in a collection
   -- need to iterate on the ds structure itself (the nodes) (for class changes)

-- conj for all the different data types (not just sets/vectors ... add to maps, arrays, lists)
-- cons for all the different data types (not just sets/vectors ... add to maps, arrays, lists)
-- contains? for all the things

-- find for maps: returns entire entry for k ?? do we really need this ??

-- add `for` macro
-- add `doseq` macro

packages?
-- finish json
-- xml
-- zip
