Things to do:

*  profile/work-on efficiency

*  push up what we have (even without tests/vectors/refactoring) and do this more often please

*  reorganize .asd modules and folders
 -- separate hamt (hashed array mapped trie -- maps and sets) from bpvt (bit partitioned vector trie -- vectors)
 -- do we have any 'common' classes that these two share??  where to put them

*  add generics for much of CL's functions with proper default methods (length, cons, first, rest, etc) as needed

*  improve tests

*  move the persistent-vetor code over and work into this codebase (bpvt)

*  make a transient data structure from a persistent one (just add the data to a new transient instance)
*  make a persistent data strucure out of a transient (use change-class ?? for speed)
*  default to using transients when constructing persistent ds with &rest args for speed

*  add as many of clojure's core functions to the library as we can (don't get in a hurry ... add things in a way that fit it will with lisp as-is)

14. for vectors, is it possible to change the default 32/5 partition to a 64/6 or 64/8 partition relatively quickly/seamlessly when we hit the limits of 32/5 (like lisp's arithmetic stack) ?????


;; long term

*  at this point (if all this is implemented) open-source it (BSD license) ??????

*  rewrite the matcher program in lisp using new ds's and see how it feels works

*  at some point do we want to rewrite the backend of clockpartners in persidastricl/common-lisp and have a re-frame or reagent front end???
